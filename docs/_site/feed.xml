<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-05T06:55:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">660nm</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>660nm</name></author><entry><title type="html">SDカードケースを購入</title><link href="http://localhost:4000/others/2022/10/05/sdcard-case.html" rel="alternate" type="text/html" title="SDカードケースを購入" /><published>2022-10-05T02:00:00+09:00</published><updated>2022-10-05T02:00:00+09:00</updated><id>http://localhost:4000/others/2022/10/05/sdcard-case</id><content type="html" xml:base="http://localhost:4000/others/2022/10/05/sdcard-case.html">&lt;h2 id=&quot;sdカードケース&quot;&gt;SDカードケース&lt;/h2&gt;

&lt;p&gt;SDカードケースを購入．&lt;/p&gt;

&lt;h2 id=&quot;hakuba-portable-media-case&quot;&gt;HAKUBA portable media case&lt;/h2&gt;

&lt;p&gt;購入したのはHAKUBAのSDカードが8枚収納できるケース．SDカードは8枚も使いませんが，スマホで使っているmicroSDもアダプターをつければしまえるかなということでこのサイズにしました．本当はCFexpressも収納できるケースがあると良かったのですがそれは見つけられず．&lt;/p&gt;

&lt;p&gt;![](https://lh3.googleusercontent.com/a6RP6zpXPb2LtWuuJlbULj_gI4FTbKQfGV4dNfFMWDJovLy_VDSQyHb3ZXQel_VvE644jZDR4EIQt8dXP4il6DMgz1f8zAPew0cPgKaf6RLy6benKIVVw_Awq6mmV5m0iaLwsCKl=s0 “”)&lt;/p&gt;</content><author><name>660nm</name></author><category term="others" /><category term="google" /><category term="photo" /><summary type="html">SDカードケース</summary></entry><entry><title type="html">アヌビアス キリンミニ 購入1年後くらい経過</title><link href="http://localhost:4000/%E6%B0%B4%E8%8D%89/2022/10/04/anubius-mini-1-year.html" rel="alternate" type="text/html" title="アヌビアス キリンミニ 購入1年後くらい経過" /><published>2022-10-04T18:00:00+09:00</published><updated>2022-10-04T18:00:00+09:00</updated><id>http://localhost:4000/%E6%B0%B4%E8%8D%89/2022/10/04/anubius-mini-1-year</id><content type="html" xml:base="http://localhost:4000/%E6%B0%B4%E8%8D%89/2022/10/04/anubius-mini-1-year.html"></content><author><name>660nm</name></author><category term="水草" /><category term="アヌビアス" /><category term="Aミニキリン" /><summary type="html"></summary></entry><entry><title type="html">google photoの画像を埋め込む</title><link href="http://localhost:4000/others/2022/10/04/upload-google-photo.html" rel="alternate" type="text/html" title="google photoの画像を埋め込む" /><published>2022-10-04T03:00:00+09:00</published><updated>2022-10-04T03:00:00+09:00</updated><id>http://localhost:4000/others/2022/10/04/upload-google-photo</id><content type="html" xml:base="http://localhost:4000/others/2022/10/04/upload-google-photo.html">&lt;h2 id=&quot;github-pageをブログに使う場合の画像の取り扱い&quot;&gt;github pageをブログに使う場合の画像の取り扱い&lt;/h2&gt;

&lt;p&gt;githubのレポジトリはあまりサイズを大きくできない（公式の推奨で1GB）ので，このブログのメインコンテンツである画像はレポジトリに含めることができない．そこでテストとして画像はgoogle photoに入れて，その画像を埋め込む方法を試す．&lt;/p&gt;

&lt;h2 id=&quot;実際に埋め込んでみる&quot;&gt;実際に埋め込んでみる&lt;/h2&gt;

&lt;p&gt;まずgoogle photoにブログで使いたい画像をアップロード．「共有」メニューからURLを取得する．&lt;/p&gt;

&lt;p&gt;google photoからの画像埋め込みのテストです．&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lh3.googleusercontent.com/8LiGzc4UxbL9dI30V1z8ZBSAioVoCZlXXLX9vyN5zhz-eUTtTC5wswUpn1Bg3wMSJwJVxtMNeAKcOdGcPGgjwZ_gzWNiCiNlzs0c9GDnsgMyv0TH_NgVC3_tNZRb-37DXlYmCjEG=w2400&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://lh3.googleusercontent.com/8LiGzc4UxbL9dI30V1z8ZBSAioVoCZlXXLX9vyN5zhz-eUTtTC5wswUpn1Bg3wMSJwJVxtMNeAKcOdGcPGgjwZ_gzWNiCiNlzs0c9GDnsgMyv0TH_NgVC3_tNZRb-37DXlYmCjEG=w800&quot; /&gt; &lt;/a&gt;
(Nikkor Z 24-120+Z6)&lt;/p&gt;

&lt;h2 id=&quot;tag-test1&quot;&gt;tag test1&lt;/h2&gt;
&lt;p&gt;https://peterroelants.github.io/posts/adding-tags-to-github-pages/&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;google

photo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tag-test2&quot;&gt;tag test2&lt;/h2&gt;

&lt;p class=&quot;page__taxonomy&quot;&gt;
    &lt;strong&gt;&lt;i class=&quot;fas fa-fw fa-tags&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Tags: &lt;/strong&gt;
    &lt;span itemprop=&quot;keywords&quot;&gt;
    
      &lt;a href=&quot;/tags/google&quot; class=&quot;page__taxonomy-item p-category&quot; rel=&quot;tag&quot;&gt;google&lt;/a&gt;&lt;span class=&quot;sep&quot;&gt;, &lt;/span&gt;
    
      &lt;a href=&quot;/tags/photo&quot; class=&quot;page__taxonomy-item p-category&quot; rel=&quot;tag&quot;&gt;photo&lt;/a&gt;
    
    &lt;/span&gt;
  &lt;/p&gt;</content><author><name>660nm</name></author><category term="others" /><category term="google" /><category term="photo" /><summary type="html">github pageをブログに使う場合の画像の取り扱い</summary></entry><entry><title type="html">github-pagesを使ったブログの作り方 part2</title><link href="http://localhost:4000/others/2022/09/05/change-this-blog.html" rel="alternate" type="text/html" title="github-pagesを使ったブログの作り方 part2" /><published>2022-09-05T10:00:00+09:00</published><updated>2022-09-05T10:00:00+09:00</updated><id>http://localhost:4000/others/2022/09/05/change-this-blog</id><content type="html" xml:base="http://localhost:4000/others/2022/09/05/change-this-blog.html">&lt;h1 id=&quot;このブログの作り方工事中&quot;&gt;このブログの作り方(工事中)&lt;/h1&gt;

&lt;p&gt;github pagesを使ってブログを作成する過程を記録として残しておくことにする．私の腕前としてはgithubは普段から使っているがhtmlなどの知識はほぼゼロという状態からのスタートで，この記事もgithubについてはある程度使える，macも基本的なコマンドについては使えるという前提で書いていく予定．似たような方の参考になればと思う．&lt;/p&gt;

&lt;p&gt;そもそもgithub pagesとはgithubのレポジトリをウェブサイトの形で公開できるサービスで，サーバー代がかからないのが大きな利点だ．記事はmarkdown形式で書けば自動的にhtmlに変換して公開してくれるので普段からmarkdownに慣れている人間には記事を書く負担が減るのも良い．&lt;/p&gt;

&lt;p&gt;github pagesではサイトの静的ジェネレーターを活用して見た目や構造を整えることができる．例えば新しくブログ記事を書いたらトップページに新着情報として載せてほしいといったブログとして基本的な機能を利用するにはなんらかのジェネレータを活用するのが手っ取り早い．デフォルトでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;というジェネレータを使うことができるのでとりあえずはこれを使う方法で進める．&lt;/p&gt;

&lt;p&gt;github pagesとして外部に公開するページを作るだけなら簡単なのだが，jekyllを入れてサイトの体裁を整えるところに苦労した．基本的な手順は&lt;a href=&quot;https://docs.github.com/ja/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll&quot;&gt;githubの公式doc&lt;/a&gt;に従っている．&lt;/p&gt;

&lt;p&gt;記事が長くなりそうなのでいくつかのステップに分けておく．今日は2回目で，具体的に新しいページを作ったり表示をいじってみたりということをやる．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jekyllのセットアップ&lt;/li&gt;
  &lt;li&gt;ブログの中身の変更(今ココ!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyllのディレクトリ構造&quot;&gt;&lt;a href=&quot;http://jekyllrb-ja.github.io/docs/structure/&quot;&gt;jekyllのディレクトリ構造&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;セットアップが完了したディレクトリ構造をみてると以下のようになっている．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;
 |
 |- index.md
 |
 |- _config.yml
 |
 |- _posts/
 |
 |- _site/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このディレクトリ構成にはルールがあって，それを守らないとちゃんと表示されないのでまずはその規則を知る必要がある．&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;は基本的な設定ファイルで，テーマやタイトルなどの情報がここに格納される．&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;はトップページ．&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts/&lt;/code&gt;以下にはブログ用の記事を入れる．「ブログ用の記事」と言っているのには理由があって，jekyllでは日付で紐付けられた記事(このブログ用記事)とそれ以外の記事がある．ブログ用の記事は全てこのディレクトリ内になければならず，そのファイル名は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-title.md&lt;/code&gt;という形でなければいけない．&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site/&lt;/code&gt;以下はJekyllが変換したページが配置される（デフォルトの）場所で，gitで管理する必要はないため.gitignore ファイルに追加する方が良い．&lt;/p&gt;

&lt;h2 id=&quot;ブログタイトルを変更する&quot;&gt;ブログタイトルを変更する&lt;/h2&gt;

&lt;p&gt;まずは手始めにブログタイトルを変更してみる．&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;を開くと以下の様になっている部分がある．&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Your awesome title&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-email@example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this means to ignore newlines until &quot;baseurl:&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;Write an awesome description for your new site here. You can edit this&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;line in _config.yml. It will appear in your document head meta (for&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;Google search results) and in your feed.xml site description.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the subpath of your site, e.g. /blog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;titleなどを変更してリモートにプッシュすると，サイト名が変わっているのが確認できる．&lt;/p&gt;

&lt;h2 id=&quot;新しいブログ記事を書く&quot;&gt;新しいブログ記事を書く&lt;/h2&gt;

&lt;p&gt;デフォルトの状態で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_post&lt;/code&gt;以下に例の記事が入っているのでそれを参考にすると良い．記事はマークダウンで書かれており，ファイルの先頭には次の様な記述がある．&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 layout: post
 title:  &quot;github-pagesを使ったブログの作り方 part2&quot;
 date:   2022-09-05 21:00:00 +0900
 categories: jekyll update
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt;で囲まれた部分をYAML frontmatterとよび，ここで記事のタイトルなどを設定する．とりあえずはタイトルと日付を好きに変更して，あとは適当に記事の中身を書いてリモートにプッシュすると，トップページのPOSTと書いてある下に新しいポストが追加されている！！ クリックして今書いた内容が表示されていれば成功だ．&lt;/p&gt;

&lt;p&gt;基本的にはこの要領でブログ記事を次々に追加していくことができる．新しい記事を書けばトップページに自動でリンクが貼られるので，これで最低限ブログの体裁はできた．&lt;/p&gt;</content><author><name>660nm</name></author><category term="others" /><category term="jekyll" /><category term="update" /><summary type="html">このブログの作り方(工事中)</summary></entry><entry><title type="html">github-pagesを使ったブログの作り方</title><link href="http://localhost:4000/others/2022/09/04/make-this-blog.html" rel="alternate" type="text/html" title="github-pagesを使ったブログの作り方" /><published>2022-09-04T10:03:40+09:00</published><updated>2022-09-04T10:03:40+09:00</updated><id>http://localhost:4000/others/2022/09/04/make-this-blog</id><content type="html" xml:base="http://localhost:4000/others/2022/09/04/make-this-blog.html">&lt;h1 id=&quot;このブログの作り方工事中&quot;&gt;このブログの作り方(工事中)&lt;/h1&gt;

&lt;p&gt;github pagesを使ってブログを作成する過程を記録として残しておくことにする．私の腕前としてはgithubは普段から使っているがhtmlなどの知識はほぼゼロという状態からのスタートで，この記事もgithubについてはある程度使える，macも基本的なコマンドについては使えるという前提で書いていく予定．似たような方の参考になればと思う．&lt;/p&gt;

&lt;p&gt;そもそもgithub pagesとはgithubのレポジトリをウェブサイトの形で公開できるサービスで，サーバー代がかからないのが大きな利点だ．記事はmarkdown形式で書けば自動的にhtmlに変換して公開してくれるので普段からmarkdownに慣れている人間には記事を書く負担が減るのも良い．&lt;/p&gt;

&lt;p&gt;github pagesでは静的ジェネレーターを活用して見た目や構造を整えることができる．例えば新しくブログ記事を書いたらトップページに新着情報として載せてほしいといったブログとして基本的な機能を利用するにはなんらかのジェネレータを活用するのが手っ取り早い．デフォルトでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;というジェネレータを使うことができるのでとりあえずはこれを使う方法で進める．&lt;/p&gt;

&lt;p&gt;github pagesとして外部に公開するページを作るだけなら簡単なのだが，jekyllを入れてサイトの体裁を整えるところに苦労した．基本的な手順は&lt;a href=&quot;https://docs.github.com/ja/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll&quot;&gt;githubの公式doc&lt;/a&gt;に従っている．&lt;/p&gt;

&lt;p&gt;記事が長くなりそうなのでいくつかのステップに分けておく．今日は1回目.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jekyllのセットアップ(イマココ!)&lt;/li&gt;
  &lt;li&gt;ブログの中身の変更&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;環境&quot;&gt;環境&lt;/h2&gt;
&lt;p&gt;M1mac
Homebrew
zsh&lt;/p&gt;

&lt;h2 id=&quot;1-m1macへのrbenvを利用したrubyのinstall&quot;&gt;1. M1macへのrbenvを利用したRubyのinstall&lt;/h2&gt;
&lt;p&gt;jekyllはrubyで書かれているので，まずはrubyを入れるところから始める．macにはデフォルトで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ruby&lt;/code&gt;に入っているのだが，一応一からやってみることにする．rubyを入れるためにrubyのバージョン管理システムである&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;をHomebrew経由で導入する．追加で環境設定用のコマンドを.zshrcに追記する．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# homebrew経由でinstall&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rbenv

&lt;span class=&quot;c&quot;&gt;# rbenv用の環境設定を.zshrcに追記&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=$HOME/.rbenv/bin:$PATH'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eval &quot;$(rbenv init - zsh)&quot;'&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;c&quot;&gt;# .zshrcをリロード&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここまでできたらちゃんと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;がインストールできているか以下のコマンドで確認しておく．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果として3.0.0などいくつかの数字がズラズラ表示されればインストールは成功なのでRubyをインストールする．表示された数字の中から適当に一つ選んで以下のコマンドを実行する．私は2.7.2を選んだが特に理由はない．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで問題発生．インストールが途中で止まってしまう．．．調べてみると&lt;a href=&quot;https://kenzoblog.vercel.app/posts/m1-chip&quot;&gt;こういう&lt;/a&gt;記事を見つけたので同じように実行し直してみるとうまくインストールできた．ネットで調べてみるとぼちぼちインストールに失敗したという記事が出てくるので大変なステップかもしれない．インストールできたら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv versions&lt;/code&gt;コマンドで確認する．ここに自分の指定した番号がちゃんと表示されていれば成功．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# install ruby &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RUBY_CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-w&quot;&lt;/span&gt; rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.3

&lt;span class=&quot;c&quot;&gt;# check if installed&lt;/span&gt;
rbenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後にインストールされたバージョンを実際に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv global&lt;/code&gt;コマンドで適用する．適用できていれば実際にrubyを実行した時のバージョン表示が自分の指定したものに変わっているはずだ．&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;which&lt;/code&gt;でみると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;の仮想環境内に自分の入れたrubyが入っていることがわかる．&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 
rbenv global 2.7.3

# installされたrubyが実際に適用されたか否か
ruby -v
which ruby


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでめでたくrubyの環境設定は終了で，続いて本題のjekyllのinstallに移る．&lt;/p&gt;

&lt;h2 id=&quot;2-bundlerとjekyllのinstall&quot;&gt;2. bundlerとjekyllのinstall&lt;/h2&gt;

&lt;p&gt;rubyではパッケージ管理システムとして&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt;というコマンドが使われている．まずはgemがちゃんと入っているかを確認する．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which gem 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでちゃんと仮想環境内のgemを指し示していたら先にすすむ．bundler(後で必要になる)とjekyllをgemからインストールする．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler jekyll 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-サイトのセットアップ&quot;&gt;3. サイトのセットアップ&lt;/h2&gt;

&lt;p&gt;まずはブログにしたいローカルブランチに行って，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;コマンドで新しくサイトを生成する．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Creates a Jekyll site in the current directory&lt;/span&gt;
jekyll new &lt;span class=&quot;nt&quot;&gt;--skip-bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;するといくつかの新しいページが作られるが，その中で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を開く．ファイルでも言及されているが，github pagesで使うように2つ修正する．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#1. gem &quot;jekyll&quot;で始まる行をコメントアウト&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#2. gem &quot;github-pages&quot;で始まる行のコメントを外す&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コマンドラインから以下を実行する．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /path/to/bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで初期セットアップは完成．もしローカル環境でブログの出来栄えをみたければ&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コマンドでローカルサーバーを立ち上げてどういう表示になっているかを確認できる．&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>660nm</name></author><category term="others" /><category term="jekyll" /><category term="update" /><summary type="html">このブログの作り方(工事中)</summary></entry></feed>